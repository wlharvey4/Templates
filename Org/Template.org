# -*- mode:org; -*-

#+title:TITLE
#+subtitle:{{{version}}} {{{date}}}
#+author:AUTHOR
#+date:2020-01-24 07:16
#+macro:version Version 0.1.6

#+texinfo:@insertcopying


* Introduction
:PROPERTIES:
:unnumbered: t
:END:

* Chapter

* Build Tools
:PROPERTIES:
:appendix: t
:END:

** Makefile                                          :dependencies:env_vars:
:PROPERTIES:
:appendix: t
:dependency1: "make"
:dependency2: "AWS Account with ~/.aws/credentials and ~/.aws/config"
:dependency3: "S3 bucket set up for serving a static web pages"
:dependency4: "GitHub Account with personal token"
:env_var1: ORG_TEMPLATE
:env_var2: EMACSLOADPATH
:env_var3: AWS_S3_BUCKET
:env_var4: GITHUB_TOKEN
:END:

#+name:Makefile
#+header: :tangle Makefile
#+header: :noweb tangle
#+begin_src makefile
  EMACS = /Applications/MacPorts/EmacsMac.app/Contents/MacOS/bin/emacs-26.3
  TEMPLATE = $(ORG_TEMPLATE)

  SAVE = resources

  ### PROGRAM
  PROJ   = <<get-org-filename()>>
  DIR    = <<get-org-lc-filename()>>
  VERS   = <<get-file-version()>>
  S3VERS = <<get-s3-version()>>
  USER   = <<get-github-user-info('login')>>

  ### TOOLS
  TOOLS  = tools
  CMPRPL = $(TOOLS)/cmprpl

  ### TEXINFO
  ORG   = $(PROJ).org
  TEXI  = $(PROJ).texi
  INFO  = $(DIR).info
  PDF   = $(PROJ).pdf
  HTML  = $(DIR)/index.html

  ### HTML DIR
  DIR_OLD= $(DIR)-old
  INDEX = index.html

  ### GITHUB
  TOKEN = $(GITHUB_TOKEN)

  ### AWS
  BUCKET = s3://$(AWS_S3_BUCKET)
  AWS    = aws2
  S3     = $(AWS) s3
  SRC    = $(DIR)/

  DST_OLD = $(BUCKET)/$(DIR)-$(S3VERS)
  DST_NEW = $(BUCKET)/$(DIR)-$(VERS)
  EXCL_INCL = --exclude "*" --include "*.html"
  GRANTS  = --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  REGION  = --region us-west-2
  S3SYNC  = $(S3) sync $(EXCL_INCL) $(SRC) $(DST_OLD) $(REGION) $(GRANTS)
  S3MOVE  = $(S3) mv --recursive $(DST_OLD) $(DST_NEW) $(REGION) $(GRANTS)

  default: check texi info html pdf

  PHONY: check default all \
	  texi info html pdf \
	  open-org open-texi open-html open-pdf \
	  clean dist-clean wiped-clean \
	  help sync update values

  values: check
	  @echo USER:		$(USER)
	  @echo PROJ:		$(PROJ)
	  @echo VERS:		$(VERS)
	  @echo S3VERS:		$(S3VERS)
	  @echo DIR:		$(DIR)
	  @echo DIR_OLD:	$(DIR_OLD)
	  @echo SRC:		$(SRC)
	  @echo DST_OLD:	$(DST_OLD)
	  @echo DST_NEW:	$(DST_NEW)

  check:
	  @[[ -z $${AWS_S3_BUCKET} ]] && \
	     { printf "$${RED}\$$AWS_S3_BUCKET $${CYAN}must be set.$${CLEAR}\n"; exit 1; } || \
	     printf "$${GREEN}AWS_S3_BUCKET: $${CYAN}$${AWS_S3_BUCKET}$${CLEAR}\n";
	  @[[ -z $${GITHUB_TOKEN} ]] && \
	     { printf "$${RED}GITHUB_TOKEN $${CYAN}must be set.$${CLEAR}\n"; exit 1; } || \
	     printf "$${GREEN}GITHUB_TOKEN: set$${CLEAR}\n";
	  @[ -d ~/.aws -a -f ~/.aws/credentials -a -f ~/.aws/config ] && \
	     printf "$${GREEN}~/.aws credentials and config: set$${CLEAR}\n" || \
	     { printf "$${RED}~/.aws 'credentials' and 'config' must be set.$${CLEAR}\n"; exit 1; }
	  @emacs --batch --load="~/.emacs" --eval \
	    '(progn \
		(if \
		  (member (quote texinfo) org-export-backends) \
		  (princ "texinfo backend: INSTALLED in org-export-backends") \
		  (princ "texinfo backend: NOT INSTALLED in org-export-backends")) \
		(terpri) \
		(if \
		   org-confirm-babel-evaluate \
		   (princ "org-confirm-babel-evaluate: SET to t; consider setting to nil") \
		   (princ "org-confirm-babel-evaluate: SET to nil")) \
		(terpri))'

  open-org: $(ORG)
	  emacsclient $(ORG) &
  $(ORG):
	  @echo 'THERE IS NO $(ORG) FILE!!!'
	  exit 1

  texi: $(TEXI)
  $(TEXI): $(ORG)
	  $(EMACS) --batch --eval '\
	  (progn \
	    (require (quote org)) \
	    (require (quote ob-shell)) \
	    (setq org-confirm-babel-evaluate nil) \
	    (find-file "$(ORG)") \
	    (org-texinfo-export-to-texinfo))'

  open-texi: texi
	  emacsclient $(TEXI) &

  info: $(INFO)
  $(INFO): $(TEXI)
	  makeinfo $(TEXI)

  html: $(HTML)
  $(HTML): $(TEXI)
	  makeinfo --html $(TEXI)
	  $(CMPRPL) $(DIR) $(DIR_OLD)
  open-html: html
	  open $(HTML)

  pdf: $(PDF)
  $(PDF): $(TEXI)
	  pdftexi2dvi --quiet --build=clean $(TEXI)
  open-pdf: pdf
	  open $(PDF)

  sync: $(HTML)
	  $(S3SYNC)
	  [[ $(VERS) != $(S3VERS) ]] && { $(S3MOVE); make homepage; } || :

  homepage: $(ORG)
	  curl -i \
	       -H "Authorization: token $(TOKEN)" \
	       -H "Content-Type: application/json" \
	       -X PATCH \
	       -d '{"homepage":"https://$(AWS_S3_BUCKET)/$(DIR)-$(VERS)"}' \
	       https://api.github.com/repos/$(USER)/$(PROJ)

  update: $(ORG)
	  emacs -Q --batch --eval \
	  '(progn \
	     (require (quote org)) \
	     (require (quote ob)) \
	     (require (quote ob-shell)) \
	     (find-file "$(TEMPLATE)") \
	     (goto-char (point-min)) \
	     (search-forward "* Build Tools") \
	     (org-beginning-of-line) \
	     (org-copy-subtree) \
	     (kill-buffer) \
	     (find-file "$(ORG)") \
	     (goto-char (point-min)) \
	     (search-forward "* Build Tools") \
	     (org-beginning-of-line) \
	     (org-yank) \
	     (org-cut-subtree) \
	     (save-buffer) \
	     (kill-buffer) \
	     (setq org-confirm-babel-evaluate nil) \
	     (org-babel-tangle-file "$(ORG)"))'

  clean:
	  -rm *~

  dist-clean: clean
	  -rm -rf *.{texi*,info*,html*,pdf*} $(DIR) $(TOOLS)
	  -for dir in *; \
	   do \
		  [ -d $$dir -a $$dir != "$(DIR_OLD)" -a $$dir != $(SAVE) ] && \
		  rm -vr $$dir; \
	   done

  wiped-clean: dist-clean
	  -rm -rf Makefile $(DIR_OLD)

  help:
	  @echo '"make default" makes the .texi file, the .info file, \
	  the html files, and the .pdf file.'
	  @echo

	  @echo '"make sync" syncs the html files in the AWS S3 bucket BUCKET; \
	  you must have your AWS S3 bucket name in the env var AWS_S3_BUCKET; \
	  You must have your AWS credentials installed in ~/.aws/credentials'
	  @echo

	  @echo '"make texi" makes the .texi file'
	  @echo '"make info" makes the .info file'
	  @echo '"make html" makes the html distribution in a subdirectory'
	  @echo '"make pdf" makes the .pdf file'
	  @echo

	  @echo '"make open-org" opens the ORG program using emacsclient for editing'
	  @echo '"make open-texi" opens the .texi file using emacsclient for review'
	  @echo '"make open-html" opens the distribution index.html file \
	  in the default web browser'
	  @echo '"make open-pdf" opens the .pdf file'
	  @echo

	  @echo '"make clean" removes the .texi, .info, and backup files ("*~")'
	  @echo '"make clean-dist" cleans, removes the html distribution, \
	  and removes the build directory'

#+end_src

*** TODO Next
1. The CloudFront configuration needs to be updated recognize the new version
   directory that is created as part of the ~sync~ operation.

2. Update the GitHub HOME website link for each new sync operation.

3. Store on GitHub a version of each other format upon a sync operation (i.e.,
   the INFO and PDF versions)

** Get Org Filename
This program simply uses the name of the buffer to obtain the name of the
filename to add to the Makefile.

#+caption:Get Org Filename program
#+name:get-org-filename
#+begin_src emacs-lisp :eval yes
(file-name-base)
#+end_src

** Get Org Lowercase Filename
This code looks for the =#+TEXINFO_FILENAME:= in the =#+TEXINFO EXPORTS=
subtree.  If it doesn’t exist, then it will use the lower-cased filename as a
fallback default.

#+caption:Get Org Lowercase Filename program
#+name:get-org-lc-filename
#+header: :results value
#+begin_src emacs-lisp :eval yes
  (save-excursion
    (if
        (re-search-forward "^[[:space:]]*#\\+texinfo_filename:\\(.*\\)" nil t)
        (file-name-sans-extension (match-string 1))
      (downcase (file-name-base))))
#+end_src

#+RESULTS: get-org-lc-filename

** Get File Version
This program scans the current buffer for the version number and places it into
the Makefile.

#+caption:Get File Version program
#+name:get-file-version
#+begin_src emacs-lisp :eval yes
  (save-excursion
    (goto-char (point-min))
    (re-search-forward "^#\\+macro:version Version \\(\\(?:[[:digit:]]+\\.?\\)\\{3\\}\\)")
    (concat "v" (match-string-no-properties 1) "/"))
#+end_src

** Get S3 Version
:PROPERTIES:
:dependency: ">= bash v4"
:END:
This program obtains the version number of the code currently uploaded to the
S3 bucket by obtaining a directory listing of top-level directories, which are
in the form ~PRE <dir>-v#.#.#/~, and performs a regular expression search with
a parenthesized match on the version numbers.  The program will exit with 'nil'
if there is no match, but will return the version number as a string if there
is a match.

Note that the regular expression matching requires at least Bash version 4 or
above.

#+caption:Get S3 Version
#+name:get-s3-version
#+header: :var dir=get-org-lc-filename()
#+header: :var file_version=get-file-version()
#+header: :results output
#+header: :eval yes
#+header: :shebang "#! /usr/bin/env bash"
#+begin_src sh
  if [[ ${file_version} = "v0.0.0/" ]]
  then
      echo -n "nil"

  else
      re=${dir}'-(v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)'

      # obtain a list of directories in the aws s2 bucket
      verpre=$(aws2 s3 ls s3://${AWS_S3_BUCKET}/)

      # check for a match; if one, return the version number; else return 'nil'
      if [[ $verpre =~ $re ]]
      then
		echo -n ${BASH_REMATCH[1]}/
      else
		echo -n "nil"
      fi
  fi
#+end_src

** Get GitHub User Info
This code calls the GitHub API from ~curl~ using the token stored in the env
var =GITHUB_TOKEN= to obtain the GitHub user’s information.  The user’s
information is returned as a JSON string.  Ths code returns one of the values
based on a given key.  The default key used is =html_url=, but you can ask for
any valid key by supplying an argument in the invocation, such as:
: get-github-user-info(login)

#+name:get-github-user-info
#+header: :var key="html_url"
#+begin_src sh :eval yes :results value
  node -pe 'JSON.parse(process.argv[1]).'$key "$(curl -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/user)"
#+end_src

** Compare Replace

#+begin_comment
The following source code tangles all files during an export operation.  This
is to make sure the ~cmprpl~ source code exists in the ~tools/~ directory
before running the Makefile target =html=.  It also makes sure there is a
Makefile on an initial export.  The following code is not exported.
#+end_comment

#+name:tangle-org-file
#+header: :exports results :eval yes :results silent
#+begin_src emacs-lisp
(org-babel-tangle-file (buffer-file-name))
#+end_src

The ~cmprpl~ source code attempts to resolve the issue of identical exported
code having different time stamps, thus defeating the benefit provided by the
~aws2 s3 sync~ command uploading only changed files.

This program makes sure that a generated HTML directory exists: $DIR_NEW.  If it
doesn’t, then it is in an improper state and the program stops with an error
message.

The program then checks if an old directory exists, $DIR_OLD.  If one doesn’t,
then one is created by copying the current new directory.  This provides a
baseline for comparisons going forward.  The program exits at that point.

Given that $DIR_OLD exists, the program then loops through all files in $DIR_OLD
and compares them to the files in $DIR_NEW.  If the files are identical, the
$DIR_OLD file replaces the $DIR_NEW file while retaining the old time stamp.  If
a file is different, then the $DIR_NEW file replaces the $DIR_OLD file, thus
giving it updated content and an updated time stamp.

The program then loops through all of the files in the new directory and copies
any that do not exist in the old directory.  Now both directories should be in
sync.

It is important to retain the $DIR_OLD directory for as long as possible to reap
the most benefits from the AWS S3 ~sync~ command.

#+caption:Compare Replace program
#+name:cmprpl
#+header: :mkdirp t
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle tools/cmprpl
  [[ $# -eq 2 ]] || { echo "ERROR: Incorrect command line arguments"; exit 1; }
  DIR_NEW=$1
  DIR_OLD=$2

  [[ -d $DIR_NEW ]] || { echo "ERROR: $DIR_NEW does not exist"; exit 1; }
  [[ -d $DIR_OLD ]] || { echo "CREATING: $DIR_OLD does not exist"; cp -a $DIR_NEW $DIR_OLD; exit 0; }

  for oldfile in $DIR_OLD/*
  do
      newfile=$DIR_NEW/$(basename $oldfile)
      if [[ -e $newfile ]]
      then
	      if cmp -s $newfile $oldfile
	      then
	          printf "${GREEN}copying OLD to NEW${CLEAR}: "
	          cp -vp $oldfile $newfile
	      else
	          printf "${PURPLE}copying NEW to OLD${CLEAR}: "
	          cp -vp $newfile $oldfile
	      fi
      else
	      printf "${RED}removing OLD:${CLEAR} "
	      rm -v $oldfile
      fi
  done

  for newfile in $DIR_NEW/*
  do
      oldfile=$DIR_OLD/$(basename $newfile)
      [[ -e $oldfile ]] || { printf "${BLUE}adding NEW to OLD${CLEAR}: "
			     cp -vp $newfile $oldfile; }
  done
#+end_src


* Build Scripts
** Create Script                                                :dependencies:
:PROPERTIES:
:dependency1: ":tangle ~/Dev/bin/org-template"
:dependency2: "cp -v ~/Dev/Templates/Org/Template.org "$1/$1.org
:END:
This code is a script file to create a new project from this template.  It is
called from the command line as ~org-template <project> [<author>].  It takes
one required, and one optional argument.  The required argument is the name of
the project.  The optional argument is the name of the author.  It creates a
new directory in the current working directory using the =project= argument,
then copies this template into it as a new Org file using, again, the name of
the project.  It then updates the title to the project name, and optionally the
author, using the =author= argument if it was given.  Finally, it deletes this
script from the new Org project file.

#+caption:Create Script
#+name:create-script
#+header: :tangle ~/Dev/bin/org-template
#+header: :shebang "#!/usr/bin/env bash"
#+header: :noweb tangle
#+begin_src sh -n
    # $1 := Title
    [[ ($# -eq 1) || ($# -eq 2) ]] || {
	  printf "${RED}ERROR: ${YELLOW}\'org-template ${RED}<TITLE>${YELLOW} [<AUTHOR>]\'${CLEAR}"
	  exit 1
    }
    printf "${PURPLE}"
    read -N 1 -p "Create new directory '$1' (y/n) ?"
    printf "${CLEAR}\n\n"
    [[ $REPLY =~ [yY] ]] && printf "${GREEN}" || exit 0

    mkdir -v "$1"
    printf "copy "
    cp -v ~/Dev/Templates/Org/Template.org "$1/$1.org"
    printf "${CLEAR}\n"

    sed -i '' -Ee '/^\#\+title:/ s/TITLE/'"$1"'/' \
		  -Ee '/^\#\+macro:version Version/ s/[[:digit:].]+/0.0.0/' \
		  -Ee '/^\#\+texinfo_printed_title:/ s/PRINTED TITLE/'"$1"'/' \
		  "$1/$1.org"
    [[ $# -eq 2 ]] && \
	sed -i '' -Ee '/^\#\+author:/ s/AUTHOR/'"$2"'/' "$1/$1.org"

    printf "${CYAN}"
    emacs --batch --eval \
      '(progn 
	 (require (quote org))
	 (require (quote ob))
	 (require (quote ob-shell))
	 (setq org-confirm-babel-evaluate nil)
	 (find-file '\"$1/$1.org\"')
	 (search-forward "** Create Script")
	 (org-cut-subtree)
	 (search-backward "** Makefile")
	 (org-babel-tangle 4)
	 (save-buffer 0))'

  printf "${CLEAR}\n"
#+end_src
** Update Script                                              :env_var:
:PROPERTIES:
:env_var1: (find-file-noselect (getenv "ORG_TEMPLATE"))
:END:
This code is a script file to update the Build Tools subtree in a current
project with the updated Build Tools subtree from this template.  It copies the
outline structure of the Build Tools from this template file and yanks it into
the current project’s Org file and delete’s the old, outdated Build Tools
subtree.

Note that there is also a version of this script in the Makefile that is run
with the Make command ~make update~ from the command line.  This code is an
interactive Elisp function that can be loaded into memory using =C-x C-e= and
then run interactively from within the project Org as =M-x update-build-tools=.

#+name:update-build-tools
#+begin_src emacs-lisp
  (defun update-build-tools (of-filenm)
    "Update the Build Tools of the argument file, which should be
  an Org file with a current Build Tools subtree."
    (interactive "ffile: ")
    (require (quote org))
    (save-current-buffer
	(set-buffer
	 (find-file-noselect (getenv "ORG_TEMPLATE")))
	(save-excursion
	  (goto-char (point-min))
	  (search-forward "* Build Tools")
	  (org-beginning-of-line)
	  (org-copy-subtree))
	(set-buffer
	 (find-file-noselect of-filenm))
	(save-excursion
	  (goto-char (point-min))
	  (search-forward "* Build Tools")
	  (org-beginning-of-line)
	  (org-yank)
	  (org-cut-subtree)
	  (org-backward-heading-same-level 1)
	  (save-buffer)
	  (org-babel-tangle))))
#+end_src
** Toggle Emacs Init
This script allows the user to toggle into effect a different Emacs
initialization setup.  The script first lists the currently-selected
initialization setup, then it lists the available initialization options, then
requests the user's choice.  After obtaining the choice, it changes the
symbolic link in ~/.emacs.d to that chosen by the user.  Emacs must then be
restarted.

Each initialization setup is a complete ~/.emacs.d subtree, which must be set
up by the user, with its name given after a dash, such as =~/.emacs.d-original=
or =~/.emacs.d-cfbt= (“Clojure for the Brave and True”).

#+name:toggle-emacs-init
#+header: :shebang "#!/usr/bin/env bash"
#+header: :tangle ~/Dev/bin/toggle-emacs-init
#+begin_src sh
  ls -l ~/.emacs.d | cut -f 12- -d ' '
  echo
  select choice in $(ls -1d ~/.emacs.d-*) "break"
  do
      echo You chose $choice
      [[ $choice = "break" ]] && break
      rm ~/.emacs.d
      ln -vs $choice ~/.emacs.d
      ls -l ~/.emacs.d
      echo "You need to restart Emacs now."
      break
  done
#+end_src

* List of Programs
:PROPERTIES:
:appendix: t
:END:
#+texinfo:@listoffloats Listing

* List of Examples
:PROPERTIES:
:appendix: t
:END:
#+texinfo:@listoffloats Example

* Copying
:PROPERTIES:
:copying:  t
:END:

{{{title}}} {{{version}}} last modified on {{{date}}}

Copyright \copy 2020 by {{{author}}}

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:index:    fn
:unnumbered: t
:END:

* Variable Index
:PROPERTIES:
:index:    vr
:unnumbered: t
:END:


* Footnotes


* Export Configurations                                            :noexport:
#+texinfo_filename:template.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:<DIR CATEGORY>
#+texinfo_dir_title:<DIR TITLE>
#+texinfo_dir_desc:<DIR DESCRIPTION>
#+texinfo_printed_title:PRINTED TITLE


* Local Variables                                                  :noexport:
# Local Variables:
# fill-column: 79
# electric-quote-local-mode: t
# indent-tabs-mode: t
# time-stamp-pattern: "8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
