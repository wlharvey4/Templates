%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%             DO NOT EDIT THIS FILE!!!!              %
% It was created by jrweave from `my_template.twjr'. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\input texinfo   @c -*- mode: texinfo -*-

@c FILE    my_template.twjr
@c VERSION 0.7.3
@c DATE    2018-11-13T23:55
@c AUTHOR  wlharvey4

@c *****************************************************************************
@c %**start of header

@setfilename  my_template.info
@settitle     My TWJR Template

@c %**end of header

@c Extra indices added by jrweave
@defindex cd   @c chunk definition
@defindex cr   @c chunk reference
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set TITLE      Long Title Here
@set SHORTTITLE Short Title Here
@set AUTHOR WLHarvey4
@set EDITION 0.n
@set UPDATE-MONTH MONTH, YYYY @c goes in the subtitle
@set COPYRIGHT-YEAR YYYY
@set COPYRIGHT-HOLDER Copyright Holder
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c BIBCITE MACROS
@c *****************************************************************************

@c need to load macros before header
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@macro mybibnode{}
@value{mybibrefnode}
@end macro

@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset

@end macro

@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear

@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset

@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset

@end macro

@mybibusetable{Bibliography}

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@c -----------------------------------------------------------------------------
@ifclear FORPRINT
@tex
\gdef\linkcolor{0.5 0.09 0.12}
@end tex
@tex
\gdef\urlcolor{0.5 0.09 0.12}
@end tex
@tex
\global\urefurlonlylinktrue
@end tex
@end ifclear

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@c -----------------------------------------------------------------------------








@c *****************************************************************************
@c SECTIONING / INDICES
@c *****************************************************************************

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook


@c merge the function and variable indices into the concept index do so without
@c the code  font, and in the  index entries do the  font management ourselves.
@c Also  merge in  the chunk  definition and  reference entries,  which jrweave
@c creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c Change how xref titles are quoted.
@tex
\gdef\xrefprintnodename#1{``#1''}
@end tex
@c And let braces in index entries work.
@tex
\global\usebracesinindexestrue
@end tex

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex


@c -----------------------------------------------------------------------------
@c INITIAL_SETUP
@c -----------------------------------------------------------------------------

@c The initial_setup code runs as a script in a BEGIN section of AWK during the
@c tangling  phase before  any files  are  extracted. Here  create a  directory
@c structure for project  files, plus any other initialization  that might need
@c to be done. Files are moved into directories in a @post_create command.

@c <------------------------------------->


@c END Special TexiwebJr Commands
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN PRINTED MATTER
@c --COPYING
@c --FRONT MATTER
@c   **TITLE PAGES
@c     ..Short Title
@c     ..Title Page
@c     ..Copyright Page
@c --MAIN MATTER
@c   **Top
@c     --- unpaginated ---
@c     ..General Introduction
@c     ..Menus
@c     ..Table of Contents
@c     --- paginated --- unnumbered ---
@c     ..Front Matter
@c       ~~Forward
@c       ~~Preface
@c     --- paginated --- numbered ---
@c     ..Main Matter
@c       ~~Chapters
@c         >>Sections
@c           ^^Subsections
@c             ##Subsubsections
@c     --- paginated --- lettered ---
@c       ~~Appendices
@c --BACK MATTER
@c   --- paginated --- unnumbered ---
@c   **Lists (Unnumbered)
@c     ..Bibliography
@c     ..Tables
@c     ..Indices
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN COPYING
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@copying

@c <------------------------------------->
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c <------------------------------------->


@c <------------------------------------->
@ifnotdocbook
Copyright @copyright{} @value{COPYRIGHT-YEAR} @*
@value{COPYRIGHT-HOLDER} @*
All Rights Reserved.
@end ifnotdocbook
@c <------------------------------------->


@sp 1
The @value{TITLE} is copyrighted @copyright{} @value{COPYRIGHT-YEAR} by
@value{COPYRIGHT-HOLDER}.  It is published under the conditions of the GNU
General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.


@end copying
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TITLEPAGE
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@c Let texinfo.tex give us full section titles
@xrefautomaticsectiontitle on

@c Start extra commands added by jrweave

@c For HTML, spell out email addresses, to avoid problems with
@c address harvesters for spammers.
@ifhtml
@macro EMAIL{real,spelled}
``\spelled\''
@end macro
@end ifhtml
@ifnothtml
@macro EMAIL{real,spelled}
@email{\real\}
@end macro
@end ifnothtml

@macro FIXME{text}
@strong{FIXME}: \text\
@end macro

@macro oldnum{value}
\value\
@end macro

@tex
\gdef\oldnum#1{\begingroup\oldstyle #1\endgroup}%
@end tex

@c End extra commands added by jrweave

@titlepage

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{SHORTTITLE} Edition @value{EDITION} (@value{UPDATE-MONTH})
@author @value{AUTHOR}

@c <------------------------------------->
@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@c <------------------------------------->

@end titlepage
@c /////////////////////////////////////////////////////////////////////////////








@c =============================================================================
@c HEADINGS SETTINGS
@c =============================================================================

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN TOP
@c --General Introduction
@c --Main Menu
@c --Table of Contents
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top, Preface, (dir), (dir)
@top General Introduction
@c =============================================================================

This file documents @value{TITLE}, a program that does @dots{}.

@insertcopying

@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c -----------------------------------------------------------------------------

@c <------------------------------------->
@c                MENUS

@menu
* Preface::
* Introduction::
* First chapter::
* The Makefile::
* Code Chunk Summaries::
* @mybibnode{}::
* List of Tables::
* Concept Index::

@detailmenu
 --- The Detailed Node Listing ---

Preface

* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.

What Is Covered

* The Readme::

First Chapter Title

* First Section::

The Makefile

* Makefile Variable Definitions::
* Makefile Default Target::
* Makefile TWJR Targets::
* Makefile Clean Targets::
* Makefile Applications::

Code Chunk Summaries

* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.

@end detailmenu
@end menu

@c <------------------------------------->


@c <------------------------------------->
@c                 TOC

@c @summarycontents
@contents
@c <------------------------------------->


@c -----------------------------------------------------------------------------


@c END Menu and TOC
@c /////////////////////////////////////////////////////////////////////////////







@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Front Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN FRONT-MATTER
@c --Forward
@c --Preface
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c *****************************************************************************
@c                                 FORWARD

@c @node Foreword
@c @unnumbered Foreword


@c END Forward
@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c                               PREFACE

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN Preface
@c --Audience
@c --Overviw
@c --Conventions
@c --Acknowledgements
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Preface, Introduction, Top, Top
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
@end menu




@c -----------------------------------------------------------------------------

@node Audience, Overview, Preface, Preface
@unnumberedsec Intended Audience

Who should read  this document?  First, what is literate  programming? To begin
this conversation, it is just as important to understand what it is not as what
it is. It is @emph{not}  @b{documentation}.  It is, rather, a @emph{programming
paradigm}, or  perhaps a @emph{programming  meta-language} sitting on top  of a
conventional programming language.  Here are a few quotes to set the context:

@quotation
@sansserif{Read your  first page: YOU  GOT IT TOTALLY  WRONG. Literate
programming is NOT about documentation in the first place.  All quotes
you  tore  out  speak  of  literate programming  as  if  it's  just  a
documentation system.  While it is not.}

@sansserif{Literate programming  is a PROGRAMMING PARADIGM,  or if you
wish a "META-LANGUAGE",  on top of machine-coding  language, which was
created with the purpose of: a) allowing humans to create abstractions
over abstractions over abstractions with  macros (which are phrases in
a human language  and if you wish are precise  "new operators" in that
meta-language, created  on the fly). b)  this system of macros  can be
created  not  in machine  demanded  order,  but  as need  for  logical
thinking.   Later  it  is  reshuffled  ("tangled",  i.e.   convoluted,
scrambled) from the natural into the inhuman machine codes.}

@sansserif{You  totally missed  the idea,  and  in the  case of  blind
leading  the   blind  quote  scores  of   other  misreaders.  Literate
programming is not  a documentation system per se,  it's a programming
paradigm.}

@author Astonished Reader @mybibcite{LitProg:Home}
@end quotation

It is literature  teaching people about a  very complex system, i.e.,  a set of
symbols intended for  humans about a set  of symbols intended for  a machine to
interpret and turn into action.

@quotation
@sansserif{Let us change our  traditional attitude to the construction
of programs: Instead of imagining that  our main task is to instruct a
computer what to do, let us  concentrate rather on explaining to human
beings what we want a computer to do.}
@author Donald Knuth @mybibcite{LitProg:Knuth}
@end quotation

@quotation
@sansserif{Literate programming  is the art of  preparing programs for
human readers.}
@author Norman Ramsey @mybibcite{LitProg:Ramsey}
@end quotation

Literate programming  is a  programming paradigm  or meta-language  that allows
greater abstraction than the programming language itself; it is a paradigm that
is based  upon the logical needs  and understandings of the  programming author
speaking to programming  readers (including him or herself), while  at the same
time,  in parallel,  it is  a  paradigm or  meta-language designed  to allow  a
computer system to  @emph{tangle} the programming author's ideas  into a system
that  is understood  and  processed by  a machine  according  to the  machine's
requirements: machine code.

In the case  of literate programming via the  @file{TexiWebJr} system, however,
there is the added advantage that  during the @emph{weaving} process the author
is producing two  dual abstractions for readers: @b{nodes}  (via an @file{Info}
file)  and  @b{sectioning}  (via   a  hyperlinked  @file{Pdf}  document),  each
inherently independent  yet working in concert  to produce at one  and the same
time  both graph-based  and chapter-based  output, each  with its  own inherent
strengths  and  advantages.  The  @file{TexiWebJr}  system  goes even  further,
however, in  producing a  third output which  is a hybrid  of both  systems, an
@acronym{HTML}  form (via  an @acronym{HTML}  web  site) that  combines both  a
sectioning output  and a graph-based  output.  You  have your choice  of graph,
sectioning, and combined,  all of which is fully  indexed and cross-referenced,
from one  source file.

It  is an  inherent aspect  of literate  programming that  there is  always one
source document,  so that by  changing any one part  of the system,  the author
updates all  forms of  output at  one and the  same time.   It is  perhaps this
aspect of  literate programming  that causes the  confusion with  thinking that
literate  programming  is  solely   about  @emph{documentation}.   In  reality,
however, that  is just one  aspect of literate  programming; the real  point of
literate programming  is that the author  can attack the problem  of creating a
complex system from an abstract logical position disconnected to a large degree
from the  requirements of  the computer  machine and present  the problem  to a
reader in a way  that will provide true understanding with  less effort than if
the reader had to understand the system from the computer's point of view

And finally, I use  literate programming as a form of  education.  It allows me
to  take a  complex situation  and break  it down  into hierarchies  of simpler
parts, but at  the same time provide links and  cross-references and indices to
tie the complex  system together into a web of  inter-related parts, which form
the whole.  Using this form of literate programming, I can create one big whole
system, and iteratively rework it into a web of inter-related parts that inform
my growing understanding  of the system as a whole,  while never destroying the
system's inherent  integrity to operate as  a functional machine.

In summary, I see the advantages of literate programming to be immense and that
far outweigh the  relatively high cost of  learning how to do it  (which is for
certain a life-long endeavor in itself).  Therefore, dear Reader, this document
is intended for human  consumption.  If you are a machine,  please refer to the
tangled mess that has  been prepared for you as source  code.  Whoever you are,
enjoy.  Cheers.




@c -----------------------------------------------------------------------------

@node Overview, Conventions, Audience, Preface
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.


@c .....................................

@menu
* The Readme::
@end menu

@node The Readme,  , Overview, Overview
@unnumberedsubsec The Readme
@cindex readme

@need 400
@anchor{README-md}
@cdindex @r{@{@file{README.md}@}}, definition
@noindent
@r{@{@file{README.md}@}} @equiv{}
@example
# MY TWJR TEMPLATE

## About This Source File

This  document (`my_template.twjr`)  is  a *literate*  source  document. It  is
designed to produce an `Info` file (best read from within Emacs, but there is a
stand-alone Info  reader that can  be used),  a `Pdf` document  (generated from
LaTeX source  code by PDFTeX),  an `HTML` web  site, `Docbook` source  code, an
`XML`  document, and  a  plain text  document. In  addition.  it also  produces
working  code   in  any  language  (so   long  as  your  system   contains  the
infrastructure to  run the code). For  example, this `README` file  was drafted
within this source document  and extracted as a separate file,  as was also the
`Makefile`.  This *literate*  document's  features are  targeted  via a  custom
`Makefile` that is  also a part of  this document, and extracted  as a separate
file, and is dynamic in the sense that  if you update it, you can produce a new
version with  a simple call to  a `make` target. It  is designed to be  able to
produce any  number of working software  packages of any language  contained at
any  number of  different  locations on  your  system, all  with  a single  or,
alternatively, multiple `make` calls, depending on the granularity you need.

The Github  repository contains this  source document,  a Makefile that  can be
used  to work  with the  project, as  well as  a `Texinfo`  file that  has been
generated from  this `Twjr` file,  this README,  and a `.gitignore`  file. Most
computer systems have or can easily get the `make`, and `texinfo` programs that
are needed to  process the `Texinfo` file into the  various end documents, such
as `Info`,  `Pdf`, `HTML`, etc. Your  system will need, in  addition to `make`,
and `texinfo`, Gnu  AWK (`gawk`), and TexiwebJr to make  changes to this source
document and  process it  into a  `Texinfo` file and  extract its  programs and
files.  Your system  should also  have  the equivalent  of Bash  version 4,  as
version 4  has some parameter capabilities  that earlier versions do  not. Note
that most  versions of Mac OS  have version 3  of Bash installed as  a default.
Version 4 can be added using Homebrew or MacPorts very easily. In the past, Mac
OS has  also shipped with a  version of `texinfo`  that is below 6.5.  You will
also need to update `texinfo` to at least 6.5 if that is the case.

## How It Works

## Resources

* [TexiwebJr](https://github.com/arnoldrobbins/texiwebjr)
* [Texinfo](https://www.gnu.org/software/texinfo/)
* [Gnu AWK (gawk)](https://www.gnu.org/software/gawk/)
* [Gnu Bash](https://www.gnu.org/software/bash/)
* [TeX Live](https://www.tug.org/texlive/)

@end example
@iftex
@smallfonts @rm
@end iftex
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Conventions,  , Overview, Preface
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------

@c @node Acknowledgements
@c @unnumberedsec Acknowledgements

@c Acknowledgements go here.


@c END Preface
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN CHAPTERS
@c --Introduction
@c --Chapters 1-1
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%








@c *****************************************************************************
@c                            CHAPTER: Introduction

@node Introduction, First chapter, Preface, Top
@chapter Introduction


@c END Chapter Introduction
@c /////////////////////////////////////////////////////////////////////////////






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Part I
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              CHAPTER ONE

@node First chapter, The Makefile, Introduction, Top
@chapter First Chapter Title




@c -----------------------------------------------------------------------------
@c                              Section One

@menu
* First Section::
@end menu

@node First Section,  , First chapter, First chapter
@section First Section Title

@need 400
@anchor{Makefile---Applications--Hook}
@cdindex @r{<@i{Makefile---Applications--Hook}>}, definition
@noindent
@r{<@i{Makefile---Applications--Hook}>} @equiv{}
@example

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{<@i{Makefile---Applications}>}; see its first definition at @ref{Makefile---Applications}.
@iftex
@textfonts @rm
@end iftex


@c END Chapter First
@c /////////////////////////////////////////////////////////////////////////////


@c END CHAPTERS
@c /////////////////////////////////////////////////////////////////////////////








@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN APPENDICES
@c --The Makefile
@c --Code Chunk Summaries
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Appendices
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                              THE MAKEFILE

@node The Makefile, Code Chunk Summaries, First chapter, Top
@appendix The Makefile
@cindex makefile

The @file{Makefile} has five initial top-level targets built in as defaults:

@enumerate

@item
Variable Definitions

@itemize
@item
FILE: the name of this source document, without extension
@item
ROOT: the  name of the  root directory, which  defaults to the  present working
directory, $(PWD)
@item
FILES: the  name of  the root directory  for the files  created in  this source
document, which defaults to @file{files}
@item
LODESTONE: a reference file to help @file{Makefile} determine when to recompile
this source document or the @file{TEXI} file
@end itemize

@item
The Default Target: @command{twjr}, described below

@item
The TWJR Targets

@table @command
@item twjrkeep
@command{jrtangle jrweave info pdf html}
@item twjr
@command{twjrkeep dirclean}
@item jrtangle
@command{jrtangle $(FILE).twjr}
@item jrweave
@command{jrweave $(FILE).twjr > $(FILE).texi}
@item dist
@command{jrtangle $(FILE).twjr jrweave $(FILE).twjr > $(FILE).texi distclean}
@item newmakefile
@command{jrtangle allclean}
@end table

@item
The Clean Targets

@enumerate
@item
Clean
@item
Dirclean
@item
Distclean
@item
Allclean
@end enumerate

@item
The Applications Hook

@end enumerate




@need 400
@anchor{Makefile}
@crindex @r{<@i{Makefile---Variable Definitions}>}, use
@crindex @r{<@i{Makefile---Default Target}>}, use
@crindex @r{<@i{Makefile---TWJR Targets}>}, use
@crindex @r{<@i{Makefile---Clean Targets}>}, use
@crindex @r{<@i{Makefile---Applications}>}, use
@cdindex @r{@{@file{Makefile}@}}, definition
@noindent
@r{@{@file{Makefile}@}} @equiv{}
@example
# MAKEFILE FILE CHUNKS
######################

@r{<@i{Makefile---Variable Definitions}>}
@r{<@i{Makefile---Default Target}>}
@r{<@i{Makefile---TWJR Targets}>}
@r{<@i{Makefile---Clean Targets}>}
@r{<@i{Makefile---Applications}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Makefile---Applications}>} @tab See @ref{Makefile---Applications}.
@item @r{<@i{Makefile---Clean Targets}>} @tab See @ref{Makefile---Clean-Targets}.
@item @r{<@i{Makefile---Default Target}>} @tab See @ref{Makefile---Default-Target}.
@item @r{<@i{Makefile---TWJR Targets}>} @tab See @ref{Makefile---TWJR-Targets-1}.
@item @r{<@i{Makefile---Variable Definitions}>} @tab See @ref{Makefile---Variable-Definitions}.
@end multitable
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@menu
* Makefile Variable Definitions::
* Makefile Default Target::
* Makefile TWJR Targets::
* Makefile Clean Targets::
* Makefile Applications::
@end menu

@node Makefile Variable Definitions, Makefile Default Target, The Makefile, The Makefile
@appendixsec Makefile Variable Definitions

The @env{SHELL} variable is included because some shell commands depend upon
Bash version 4, which is not native on my system.

The @env{ROOT} variable is designed to allow you to to extract the source files
(not the @acronym{TEXI}, @acronym{INFO}, @acronym{PDF} or @acronym{HTML} files,
but  the  programs defined  inside  the  @acronym{TWJR}  file) to  a  directory
structure outside of the your  ``present working directory'' (@env{PWD}) should
that be something you want to do, i.e., for production purposes.

The @code{FILE} variable  is the name of this source  @code{TWJR} file, without
extension.

The @code{FILES} variable is the name of  the root directory for the files that
are extracted during the @emph{tangling} phase.  This directory goes underneath
the @file{ROOT} directory.  Feel free to name this whatever you want.

The @code{LODESTONE}  variable is an empty  reference file that is  used solely
for its  modification time  to help  the Makefile  determine when  to recompile
(i.e., @emph{tangle} and @emph{weave}) the  source @file{TWJR} file.  It should
not be changed or otherwise touched (pun intended).

@need 400
@anchor{Makefile---Variable-Definitions}
@cdindex @r{<@i{Makefile---Variable Definitions}>}, definition
@noindent
@r{<@i{Makefile---Variable Definitions}>} @equiv{}
@example
# VARIABLE DEFINITIONS
######################
LODESTONE := .lodestone
README    := README.md
GIT       := .git*

SHELL := $$(which bash)

FILE  := my_template
ROOT  := $(PWD)
FILES := files

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Default Target, Makefile TWJR Targets, Makefile Variable Definitions, The Makefile
@appendixsec Default Target
@cindex default target

The @code{default} target  extracts all source files and moves  them into their
proper  directories,  and  processes  the   @code{TEXI}  source  file  into  an
@code{INFO}  file, a  @code{PDF} document,  and an  @code{HTML} web  site. This
process automatically updates the TEXI's nodes and sectioning commands prior to
generating  the   INFO,  PDF,  and   HTML  documents.    What  used  to   be  a
manually-intensive process is now completely  automated through a Makefile that
is extracted from the @code{TWJR}  source.

This  automated  process  depends   upon  the  programmer's  system  containing
@file{GNU   AWK}  (for   the   primary  literate   programming  operations   of
@emph{tangling}   and   @emph{weaving}@footnote{No  other   implementation   of
@file{AWK}  will  work}),   @file{make}  (to  control  the   build  and  output
processes@footnote{While I haven't tested it, just about any @file{make} should
work}),  @file{Texinfo} of  at least  version 6.5  (for the  processing of  the
@file{TEXI} output file), @file{makeinfo} (to produce the @file{INFO} file from
the @file{TEXI}  file), and @file{Emacs}  (for the automatic updating  of nodes
and sectioning  command@footnote{Again, while I  haven't tested it,  just about
any @file{Emacs}  should work}).   With these  dependencies, everything  can be
compiled with a single call to @command{make} with no argument:

@example
$ make
@end example

Individual files and documents can also be targeted with simple calls such as:

@example
$ make html

$ make openhtml

$ make pdf

$ make openpdf

$make info

$ make openinfo

$ make distclean

$ make allclean
@end example

@noindent and so forth (just name a few).

The target  @code{twjr} is  the default, and  does everything  explicitly.  The
target @code{weave}  (or alternatively @code{texi})  will run just  the command
@command{jrweave}  on the  @file{TWJR} file  to produce  the @file{TEXI}  file,
which  is  directly  responsible  for  producing  the  output  files.   If  the
@file{TWJR}  source  file has  been  modified,  then @command{maked}  will  run
@command{jrtangle} first to update all source documents.

@need 400
@anchor{Makefile---Default-Target}
@cdindex @r{<@i{Makefile---Default Target}>}, definition
@noindent
@r{<@i{Makefile---Default Target}>} @equiv{}
@example
# DEFAULT Target
################
.PHONY : TWJR JRTANGLE TANGLE JRWEAVE WEAVE TEXI INFO PDF HTML DIST
.PHONY : default twjr twjrkeep jrtangle tangle
.PHONY : jrweave weave texi info pdf html newmakefile dist

default : TWJR

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile TWJR Targets, Makefile Clean Targets, Makefile Default Target, The Makefile
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in some  way. The @file{make} target  @command{twjr} is the default  target and
runs each of the processes  @command{jrtangle} and @command{jrweave} to produce
source files,  a @acronym{TEXI} file,  an @acronym{INFO} file,  a @acronym{PDF}
document, and an @acronym{HTML} web site.  It only sources what is necessary as
@file{make} is designed to do.  Note that at this time, @emph{weaving} includes
automatic  menu and  node  updating  of the  @acronym{TEXI}  file,  so that  an
@acronym{INFO} file  can also be  generated without needing to  manually update
the  @acronym{TEXI} file  first  as used  to be  the  case. @file{make}  target
@code{info}     runs     @command{makeinfo},     target     @code{pdf}     runs
@command{pdftexi2dvi}, and target @code{html} runs @command{makeinfo --html}.

The default @file{twjr} target deletes all extraneous build and log files prior
to finishing.   If you want  to retain  the build and  log files, then  run the
target @file{twjrkeep} instead.

The  file  @file{.lodestone}   is  used  to  set  a  reference   time  for  the
@acronym{TWJR} file,  so that  if the @acronym{TWJR}  file changes,  new source
documents will be generated; otherwise, it  will simply be left alone. In other
words, if @file{.lodestone}  is older than @file{.twjr},  then @file{.twjr} has
been modified, and it should be @emph{tangled} and @emph{woven} first.  If it is
newer, then @command{make} will not recompile.

Should the @file{Makefile}  portion of the @file{TWJR} be modified,  then it is
important to  obtain a fresh copy  of the @file{Makefile} prior  to running any
target; therefore,  use the target  @command{make newmakefile} first,  then run
any desired target.

@need 400
@anchor{Makefile---TWJR-Targets-1}
@cdindex @r{<@i{Makefile---TWJR Targets}>}, definition
@noindent
@r{<@i{Makefile---TWJR Targets}>} @equiv{}
@example
# TWJR TARGETS
##############

# <------------------------------------->
#               twjrkeep

# Process everything; don't remove any build or log files;

twjrkeep : jrtangle jrweave info pdf html


# <------------------------------------->
#                 TWJR
#                DEFAULT

# Process everything; remove build files and logs.

TWJR : twjr
twjr : twjrkeep dirclean


# <------------------------------------->
#               JRTANGLE

# JRTANGLE depends upon the LODESTONE and the ROOT/FILES directory;
# if either is missing or out of date, then JRTANGLE will be run to
# extract its files.

JRTANGLE : TANGLE
TANGLE   : jrtangle
jrtangle : tangle
tangle   : $(LODESTONE) files

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---TWJR-Targets-2}.

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@anchor{LODESTONE}
@need 400
@anchor{Makefile---TWJR-Targets-2}
@cdindex @r{<@i{Makefile---TWJR Targets}>}, definition
@noindent
@r{<@i{Makefile---TWJR Targets}>} +@equiv{}
@example
# <------------------------------------->
#               LODESTONE

# Checks the relative time to determine if JRTANGLE should be rerun

$(LODESTONE) : $(FILE).twjr
    @@printf "$@{YELLOW@}Tangling $(FILE)...$@{CLEAR@}\n"
    @@jrtangle $(FILE).twjr
    @@touch $(LODESTONE)
    @@printf "$@{GREEN@}done tangling.$@{CLEAR@}\n"


# <------------------------------------->
#                files

# Checks for  the existence  of the ROOT/FILES  directory; extracts  files into
# them if they don't  exist or are out of date; they must  be retouched if they
# exist but  are out of date  because they will  not be remade or  updated when
# files are extracted into them

files : $(ROOT)/$(FILES)
$(ROOT)/$(FILES) : $(FILE).twjr
    @@printf "$@{YELLOW@}Creating files...$@{CLEAR@}\n"
    @@touch $(FILE).twjr
    @@make $(LODESTONE)
    @@touch $(ROOT)/$(FILES)
    @@printf "$@{GREEN@}done creating files.$@{CLEAR@}\n"


# <------------------------------------->
#              newmakefile

# Extracts the Makefile if necessary by tangling; everything else
# is thereafter deleted

newmakefile : $(LODESTONE) allclean


# <------------------------------------->
#              JRWEAVE

# Extracts the TEXI, and updates the nodes and sections with a batch call to
# Emacs; it depends upon TWJR

JRWEAVE : WEAVE
WEAVE   : TEXI
TEXI    : jrweave
jrweave : weave
weave   : texi
texi    : $(FILE).texi
$(FILE).texi : $(FILE).twjr
    @@printf "$@{YELLOW@}Weaving $(FILE)...$@{CLEAR@}\n"
    @@jrweave $(FILE).twjr > $(FILE).texi
    @@printf "$@{GREEN@}done weaving.$@{CLEAR@}\n";
    @@printf "$@{YELLOW@}updating $(FILE)'s menus and nodes...$@{CLEAR@}\n"
    @@emacs --batch --eval '(progn (find-file "./$(FILE).texi" nil) \
      (texinfo-master-menu 1) (save-buffer 0))' 2> .batch.log
    @@printf "$@{GREEN@}done updating.$@{CLEAR@}\n"

# <------------------------------------->
#                DIST

# Runs jrtangle jrweave distclean; prepares for git commit

DIST : dist
dist : jrtangle jrweave distclean


# <------------------------------------->
#                 INFO
#               OPENINFO

# Runs makeinfo on the TEXI file;
# Opens the INFO file in Emacs

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
    @@printf "$@{YELLOW@}Creating an INFO file...$@{CLEAR@}\n"
    @@makeinfo $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openinfo : INFO
    @@printf "$@{YELLOW@}Opening INFO in Emacs...$@{CLEAR@}\n"
    @@emacsclient -s server --eval \
        '(progn \
            (info "$(ROOT)/$(FILE).info") \
            (revert-buffer t t))'
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"


# <------------------------------------->
#                  PDF
#                OPENPDF

# Runs pdftexi2dvi on the TEXI file;
# Opens the PDF file

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
    @@printf "$@{YELLOW@}Creating a PDF file...$@{CLEAR@}\n"
    @@pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openpdf : PDF
    @@printf "$@{YELLOW@}Opening PDF...$@{CLEAR@}\n"
    @@open $(FILE).pdf
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"


# <------------------------------------->
#                 HTML
#               OPENHTML

# Runs makeinfo --html on the TEXI file;
# Opens index.html in a browser

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
    @@printf "$@{YELLOW@}Creating an HTML directory...$@{CLEAR@}\n"
    @@makeinfo --html $(FILE).texi
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"
openhtml : HTML
    @@printf "$@{YELLOW@}Opening INDEX.HTML in the browser...$@{CLEAR@}\n"
    @@open $(FILE)/index.html
    @@printf "$@{GREEN@}done$@{CLEAR@}\n"

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is also defined in
@ref{Makefile---TWJR-Targets-1}.

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets, Makefile Applications, Makefile TWJR Targets, The Makefile
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes  backup files. The @command{dirclean} target
removes build  directories and log  files, but  not source files  (those inside
@file{files} directory,  e.g., @file{bin/} and and  @file{src/}) and associated
files and  programs inside  them.  The  @command{distclean} target  removes the
@acronym{INFO}, @acronym{PDF},  @acronym{HTML}, and @acronym{source}  files and
directories, leaving just  the @file{TWJR} file, the @file{TEXI}  file, and the
@file{Makefile}.  Finally,  the  @command{allclean} target  removes  everything
except the @acronym{TWJR} file and the @file{Makefile}.

@need 400
@anchor{Makefile---Clean-Targets}
@cdindex @r{<@i{Makefile---Clean Targets}>}, definition
@noindent
@r{<@i{Makefile---Clean Targets}>} @equiv{}
@example
# CLEAN TARGETS
################
.PHONY : clean dirclean distclean allclean

# <------------------------------------->
#                clean

# remove backup files

clean :
    @@printf "$@{WHITEBOLD@}Cleaning...$@{CYAN@}\n"
    @@rm -f *~ .*~ #*# #*.*#
    @@printf "$@{GREEN@}done cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#               dirclean

# after clean:  remove all  build and miscellaneous  files, leaving  only TWJR,
# TEXI,  INFO, HTML,  PDF,  Makefile,  README, .git,  .gitignore  & the  source
# documents.

dirclean : clean
    @@printf "$@{WHITEBOLD@}Dir-cleaning...$@{CYAN@}\n"
    @@for file in * .*; do      \
      case $$file in           \
            '.' | '..')          ;;\
        $(FILE)* | Makefile) ;;\
        $(FILES)*)       ;;\
        $(LODESTONE))        ;;\
        $(README))       ;;\
        $(GIT))      ;;\
        *) rm -vfr $$file    ;;\
      esac                     \
    done
    @@printf "$@{GREEN@}done dir-cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#                distclean

# after dirclean: remove INFO, HTML, and PDF, and FILES

distclean : dirclean
    @@printf "$@{WHITEBOLD@}Dist-cleaning...$@{CYAN@}\n"
    @@rm -vfr $(FILE) $(FILE).info $(FILE).pdf $(ROOT)/$(FILES)
    @@printf "$@{GREEN@}done dist-cleaning.$@{CLEAR@}\n"


# <------------------------------------->
#                allclean

# allclean: remove TEXI, leaving only TWJR and Makefile

allclean : distclean
    @@printf "$@{WHITEBOLD@}Cleaning all...$@{CYAN@}\n"
    @@rm -vfr $(FILE).texi
    @@printf "$@{GREEN@}done cleaning all.$@{CLEAR@}\n"

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex




@c -----------------------------------------------------------------------------

@node Makefile Applications,  , Makefile Clean Targets, The Makefile
@appendixsec Makefile Applications
@cindex Makefile applications

Place any targets for running  code-specific commands here, such as executables
in the @file{bin/} directory.  The file @verb{|@<Makefile---Applicaionts@>|} is
a hook  that can  be used in  another part  of the source  document; this  is a
fundamental feature of literate programming.

@need 400
@anchor{Makefile---Applications}
@crindex @r{<@i{Makefile---Applications--Hook}>}, use
@cdindex @r{<@i{Makefile---Applications}>}, definition
@noindent
@r{<@i{Makefile---Applications}>} @equiv{}
@example
# APPLICATION TARGETS
######################

@r{<@i{Makefile---Applications--Hook}>}

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.

@noindent
The called chunk @r{<@i{Makefile---Applications--Hook}>} is first defined at
@ref{Makefile---Applications--Hook}.
@iftex
@textfonts @rm
@end iftex


@c END The Makefile
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                        CODE CHUNK SUMMARIES

@node Code Chunk Summaries, @mybibnode{}, The Makefile, Top
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::            Source files by definition.
* Code Chunk Definitions::      Code chunks by definition.
* Code Chunk References::       Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions, Code Chunk Definitions, Code Chunk Summaries, Code Chunk Summaries
@appendixsec Source File Definitions

@table @asis
@item @r{@{@file{Makefile}@}}
This chunk is defined in
@ref{Makefile}.
@item @r{@{@file{README.md}@}}
This chunk is defined in
@ref{README-md}.
@end table




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions, Code Chunk References, File Definitions, Code Chunk Summaries
@appendixsec Code Chunk Definitions

@table @asis
@item @r{<@i{Makefile---Applications}>}
This chunk is defined in
@ref{Makefile---Applications}.
@item @r{<@i{Makefile---Applications--Hook}>}
This chunk is defined in
@ref{Makefile---Applications--Hook}.
@item @r{<@i{Makefile---Clean Targets}>}
This chunk is defined in
@ref{Makefile---Clean-Targets}.
@item @r{<@i{Makefile---Default Target}>}
This chunk is defined in
@ref{Makefile---Default-Target}.
@item @r{<@i{Makefile---TWJR Targets}>}
Multiple definitions occur in
@ref{Makefile---TWJR-Targets-1},
and
@ref{Makefile---TWJR-Targets-2}.

@item @r{<@i{Makefile---Variable Definitions}>}
This chunk is defined in
@ref{Makefile---Variable-Definitions}.
@end table




@c -----------------------------------------------------------------------------
@node Code Chunk References,  , Code Chunk Definitions, Code Chunk Summaries
@appendixsec Code Chunk References

@table @asis
@item @r{<@i{Makefile---Applications}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Applications--Hook}>}

@noindent
This chunk is called by @r{<@i{Makefile---Applications}>}; see its first definition at @ref{Makefile---Applications}.
@item @r{<@i{Makefile---Clean Targets}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Default Target}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---TWJR Targets}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Variable Definitions}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@end table


@c END Code Chunk Summaries
@c /////////////////////////////////////////////////////////////////////////////







@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c BEGIN END MATTER
@c --Bibliography
@c --Tables
@c --Indices
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
@part Back Matter
@c <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>






@c *****************************************************************************
@c                                BIBLIOGRAPHY

@node @mybibnode{}, List of Tables, Code Chunk Summaries, Top
@unnumbered Bibliography

@table @asis

@mybibitem{LitProg:Home}
"On Misreadings", email, January 2009 @url{http://www.literateprogramming.com/}

@mybibitem{LitProg:Knuth}
@url{``Literate Programming (1984)'' in Literate Programming. CSLI, 1992, pg.
99.}

@mybibitem{LitProg:Ramsey}
@url{ahttps://www.cs.tufts.edu/~nr/noweb/}

@end table


@c END Bibliography
@c /////////////////////////////////////////////////////////////////////////////







@c *****************************************************************************
@c                             LIST OF TABLES

@node List of Tables, Concept Index, @mybibnode{}, Top
@unnumbered List of Tables

@listoffloats Table


@c END Lists
@c /////////////////////////////////////////////////////////////////////////////







@c  *****************************************************************************
@c                               CONCEPT INDEX

@node Concept Index,  , List of Tables, Top
@unnumbered Index

@printindex cp


@c END Indices
@c /////////////////////////////////////////////////////////////////////////////








@bye

TODO:
