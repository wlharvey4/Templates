\input texinfo   @c -*- mode: texinfo -*-

@  FILE    my_template.twjr
@c VERSION 0.5.0
@c DATE    2018-11-07T21:35
@c AUTHOR  wlharvey4

@c *****************************************************************************
@c %**start of header

@setfilename  my_template.info
@settitle     My TWJR Template

@c %**end of header
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set TITLE      Long Title Here
@set SHORTTITLE Short Title Here
@set EDITION 0.n
@set UPDATE-MONTH MONTH, YYYY @c goes in the subtitle
@set COPYRIGHT-YEAR YYYY
@set AUTHOR WLHarvey4
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@c -----------------------------------------------------------------------------

@c *****************************************************************************
@c BIBCITE
@c *****************************************************************************

@c need to load macros before header
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@macro mybibnode{}
@value{mybibrefnode}
@end macro

@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset

@end macro

@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear

@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset

@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset

@end macro

@mybibusetable{Bibliography}

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@c -----------------------------------------------------------------------------
@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@c -----------------------------------------------------------------------------

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c Change how xref titles are quoted.
@dquotexrefs
@c And let braces in index entries work.
@allowindexbraces

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c -------------------------------------
@initial_setup
printf "${YELLOW}In initial_setup...${BLUEBOLD}\n"

ROOT="$PWD"			# <-- SET
FILES="files"
SUBDIRS="src doc tst bin"	# <-- SET

for file in ${SUBDIRS}
do
    ! [ -d $file ] && mkdir -vp ${ROOT}/${FILES}/${file}
done

printf "${GREEN}initial setup done.${CLEAR}\n"

@end initial_setup
@c -------------------------------------








@c *****************************************************************************
@c INDEX COMMANDS
@c *****************************************************************************(

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml




@c *****************************************************************************
@copying
@c *****************************************************************************

@ -----------------------------------------------------------------------------
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c -----------------------------------------------------------------------------


@c -----------------------------------------------------------------------------
@ifnotdocbook
Copyright @copyright{} YYYY, YYYY @*
Full name here @*
All Rights Reserved.
@end ifnotdocbook
@c -----------------------------------------------------------------------------


@sp 1
The FOO program is copyright
@copyright{} YYYY, YYYY by Full name here. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@end copying
@c /////////////////////////////////////////////////////////////////////////////




@c =============================================================================
@titlepage
@c =============================================================================

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author @value{AUTHOR} @c Full Name here

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook

@end titlepage
@c /////////////////////////////////////////////////////////////////////////////



@c *****************************************************************************
@c HEADINGS
@c *****************************************************************************

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex








@c #############################################################################
@c BEGIN
@c #############################################################################








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top
@top General Introduction
@c =============================================================================

@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents FOO, a program that does WHATEVER.

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c =============================================================================
@menu
@detailmenu
@end detailmenu
@end menu
@c =============================================================================




@c =============================================================================
@c @summarycontents
@contents
@c =============================================================================








@c *****************************************************************************

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword








@c *****************************************************************************

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu




@c -----------------------------------------------------------------------------
@node Audience
@unnumberedsec Intended Audience

First, what is literate programming? To  begin this conversation, it is just as
important to understand  what it is not  as what it is. It  is @emph{not} about
@b{documentation}.

@quotation
Read your  first page: YOU  GOT IT TOTALLY  WRONG. Literate programming  is NOT
about  documentation in  the first  place.  All quotes  you tore  out speak  of
literate programming as if it's just a documentation system. While it is not.

Literate   programming  is   a  PROGRAMMING   PARADIGM,  or   if  you   wish  a
"META-LANGUAGE", on top of machine-coding  language, which was created with the
purpose of:  a) allowing humans  to create abstractions over  abstractions over
abstractions with macros (which are phrases in a human language and if you wish
are precise "new operators" in that meta-language, created on the fly). b) this
system of macros can be created not  in machine demanded order, but as need for
logical  thinking.   Later  it  is  reshuffled   ("tangled",  i.e.  convoluted,
scrambled) from the natural into the inhuman machine codes.

You totally missed the  idea, and in the case of blind  leading the blind quote
scores of other misreaders. Literate  programming is not a documentation system
per ce, it's a programming paradigm.

@author Astonished Reader. "On Misreadings", email, January 2009.
@mybibcite{LitProg:Home}
@end quotation

It is literature teaching people about a very complex system, a set of symbols
intended for a machine to interpret and turn into action.

@quotation
Let us change our traditional attitude to the construction of programs: Instead
of imagining that  our main task is to  instruct a computer what to  do, let us
concentrate rather on explaining to human beings what we want a computer to do.
@author Donald Knuth @mybibcite{LitProg:Knuth}
@end quotation

@quotation
Literate programming is the art of preparing programs for human readers.
@author Norman Ramsey @mybibcite{LitProg:Ramsey}
@end quotation

Therefore,  it  is important  to  understand  that  literate programming  is  a
programming  paradigm  that allows  greater  abstraction  than the  programming
language itself, and it is a paradigm  that is based upon the logical needs and
understandings of the  programming author speaking to  other programmers, while
at the  same time,  it is  a paradigm designed  to allow  a computer  system to
``tangle'' the programming author's ideas into  a system that is understood and
processed by a  machine according to the machine's  requirements, i.e., machine
code.

This document is  intended for human consumption. If you  are a machine, please
refer to the tangled up mess that has been prepared for you as source code.


@c -----------------------------------------------------------------------------
@node Overview
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.




@c -----------------------------------------------------------------------------
@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------
@node Acknowledgements
@unnumberedsec Acknowledgements

Acknowledgements go here.




@c /////////////////////////////////////////////////////////////////////////////
@c END Preface








@c *****************************************************************************
@node Introduction
@chapter Introduction








@c *****************************************************************************

@node First chapter
@chapter First Chapter Title








@c =============================================================================
@c APPENDICES
@c =============================================================================








@c *****************************************************************************

@node The Makefile
@appendix The Makefile
@cindex makefile

@(Makefile@)=
# MAKEFILE FILE CHUNKS
######################

@<Makefile---Variable Definitions@>
@<Makefile---Default Target@>
@<Makefile---TWJR Targets@>
@<Makefile---Clean Targets@>
@<Makefile---Applications@>

@




@c -----------------------------------------------------------------------------

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

The @env{SHELL} variable is included because some shell commands depend upon
Bash version 4, which is not native on my system.

The @env{ROOT} varible is designed to allow  you to to extract the source files
(not the @acronym{TEXI}, @acronym{INFO}, @acronym{PDF} or @acronym{HTML} files,
but the programs defined inside the @acronym{TWJR} file) to a directory outside
of the your ``present working  directory'' (@env{PWD}) should that be something
you want to do.

The @code{FILE} variable is the name of the @code{TWJR} file without extension.

@<Makefile---Variable Definitions@>=
# VARIABLE DEFINITIONS
######################

SHELL := /usr/local/bin/bash
ROOT  := $(PWD)
FILE  := my_template

FILES := files
LODESTONE := .lodestone

@




@c -----------------------------------------------------------------------------

@node Makefile Default Target
@appendixsec Default Target
@cindex default target

The @code{default} target  extracts all source files and moves  them into their
proper  directories,  and  processes  the   @code{TEXI}  source  file  into  an
@code{INFO}  file, a  @code{PDF} document,  and an  @code{HTML} web  site. This
process automatically updates the TEXI's nodes and sectioning commands prior to
generating  the   INFO,  PDF,   and  HTML   documents.  What   used  to   be  a
manually-intensive process is now completely  automated through a Makefile that
is extracted from the @code{TWJR} source.  This process depends upon the system
containing  @file{make},  @file{Texinfo}  of  at least  version  6.5  (for  the
weaving),  @file{GNU  AWK}  (for  the  tangling),  and  @file{Emacs}  (for  the
updating).

The  target @code{TWJR}  will run  both commands  @command{jrtangle} (producing
code  output) and  @command{jrweave}  (producing documentation  output) on  the
@code{TWJRJ}  source  code, while  the  target  @code{WEAVE} (or  alternatively
@code{TEXI}) will  run just  the command  @command{jrweave} on  the @file{TWJR}
file.  If the  @file{TWJR} source  file  has been  modified, then  it will  run
@command{jrtangle} first.

@<Makefile---Default Target@>=
# DEFAULT Target
################
.PHONY : TWJR JRTANGLE JRWEAVE TEXI INFO PDF HTML
.PHONY : default twjr jrtangle jrweave weave texi info pdf html newmakefile

default : TWJR

@




@c -----------------------------------------------------------------------------

@node Makefile TWJR Targets
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in some  way. The @file{make} target  @command{twjr} is the default  target and
runs each of the processes  @command{jrtangle} and @command{jrweave} to produce
source files,  a @acronym{TEXI} file,  an @acronym{INFO} file,  a @acronym{PDF}
document, and an @acronym{HTML} web site.  It only sources what is necessary as
@file{make} is  designed to do.  Note that  at this time,  ``weaving'' includes
automatic  menu and  node  updating  of the  @acronym{TEXI}  file,  so that  an
@acronym{INFO} file  can also be  generated without needing to  manually update
the  @acronym{TEXI} file  first  as used  to be  the  case. @file{make}  target
@code{info}     runs     @command{makeinfo},     target     @code{pdf}     runs
@command{pdftexi2dvi}, and target @code{html} runs @command{makeinfo --html}.

The  file  @file{.lodestone}   is  used  to  set  a  reference   time  for  the
@acronym{TWJR} file,  so that  if the @acronym{TWJR}  file changes,  new source
documents will be generated; otherwise, it  will simply be left alone. In other
words, if @file{.lodestone}  is older than @file{.twjr},  then @file{.twjr} has
been modified, and it should be ``tangled'' and ``woven'' first.

@<Makefile---TWJR Targets@>=
# TWJR TARGETS
##############
# Create everything; remove build files and logs.
TWJR : twjr
twjr : jrtangle jrweave info pdf html dirclean

# Same as twjr, but don't delete any build or log files;
twjrkeep : jrtangle jrweave info pdf html

# JRTANGLE depends upon the LODESTONE and the ROOT FILES directory; if either is
# missing or out of date, then JRTANGLE will be run to extract its files.
JRTANGLE : TANGLE
TANGLE   : jrtangle
jrtangle : tangle
tangle   : $(LODESTONE) $(ROOT)/$(FILES)
$(LODESTONE) : $(FILE).twjr
	@printf "${YELLOW}Tangling $(FILE)...${CLEAR}\n"
	@jrtangle $(FILE).twjr
	@touch $(LODESTONE)
	@printf "${GREEN}done tangling.${CLEAR}\n"

# Extract the source files using jrtangle
$(ROOT)/$(FILES) :
	@jrtangle $(FILE).twjr
	@touch $(LODESTONE)

# Extracts the Makefile if necessary by tangling; everything else is thereafter
# deleted
newmakefile : $(LODESTONE)
	make allclean

# Extracts the TEXI, and updates the nodes and sections with a batch call to
# Emacs; it depends upon TWJR
JRWEAVE : WEAVE
WEAVE   : jrweave
jrweave : weave
weave : TEXI
TEXI  : texi
texi  : $(FILE).texi
$(FILE).texi : $(FILE).twjr
	@printf "${YELLOW}Weaving $(FILE)...${CLEAR}\n"
	@jrweave $(FILE).twjr > $(FILE).texi
	@printf "${GREEN}done weaving.${CLEAR}\n";
	@printf "${YELLOW}updating $(FILE)'s menus and nodes...${CLEAR}\n"
	@emacs --batch --eval '(progn (find-file "./$(FILE).texi" nil) \
	  (texinfo-master-menu 1) (save-buffer 0))' 2> batch.log
	@printf "${GREEN}done updating.${CLEAR}\n"

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
	@printf "${YELLOW}Creating an INFO file...${CLEAR}\n"
	@makeinfo $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openinfo : INFO
	@printf "${YELLOW}Opening INFO in Emacs...${CLEAR}\n"
	@emacsclient -s server --eval '(info "($(ROOT)/$(FILE).info)top")'
	@printf "${GREEN}done${CLEAR}\n"

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
	@printf "${YELLOW}Creating a PDF file...${CLEAR}\n"
	@pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openpdf : PDF
	@printf "${YELLOW}Opening PDF...${CLEAR}\n"
	@open $(FILE).pdf
	@printf "${GREEN}done${CLEAR}\n"

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
	@printf "${YELLOW}Creating an HTML directory...${CLEAR}\n"
	@makeinfo --html $(FILE).texi
	@printf "${GREEN}done${CLEAR}\n"
openhtml : HTML
	@printf "${YELLOW}Opening INDEX.HTML in the browser...${CLEAR}\n"
	@open $(FILE)/index.html
	@printf "${GREEN}done${CLEAR}\n"

@




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes  backup files. The @command{dirclean} target
removes build  directories and log  files, but  not source files  (those inside
@file{files} directory,  e.g., @file{bin/} and and  @file{src/}) and associated
files  and programs  inside them.  The @command{distclean}  target removes  the
@acronym{INFO}, @acronym{PDF},  @acronym{HTML}, and @acronym{source}  files and
directories. Finally,  the @command{allclean} target removes everything except
the @acronym{TWJR} file and the @file{Makefile}.

@<Makefile---Clean Targets@>=
.PHONY : clean dirclean distclean worldclean allclean

# remove backup files
clean :
	@printf "${WHITEBOLD}Cleaning...${CYAN}\n"
	@rm -f *~ .*~ #*#
	@printf "${GREEN}done cleaning.${CLEAR}\n"

# after clean: remove all build and miscellaneous files, leaving only
# TWJR, TEXI, INFO, HTML, PDF, Makefile & the source documents.
dirclean : clean
	@printf "${WHITEBOLD}Dir-cleaning...${CYAN}\n"
	@for file in *; do         \
	  case $$file in           \
	    $(FILE)* | Makefile) ;;\
	    files*)	 	 ;;\
	    $(LODESTONE))        ;;\
	    *) rm -vfr $$file	 ;;\
	  esac                     \
	done
	@printf "${GREEN}done dir-cleaning.${CLEAR}\n"

# after dirclean: remove INFO, HTML, and PDF, and FILES
distclean : dirclean
	@printf "${WHITEBOLD}Dist-cleaning...${CYAN}\n"
	@rm -vfr $(FILE) $(FILE).info $(FILE).pdf $(ROOT)/$(FILES)
	@printf "${GREEN}done dist-cleaning.${CLEAR}\n"

# allclean: remove TEXI, leaving only TWJR and Makefile
allclean : distclean
	@printf "${WHITEBOLD}Cleaning all...${CYAN}\n"
	@rm -vfr $(FILE).texi
	@printf "${GREEN}done cleaning all.${CLEAR}\n"

@




@c -----------------------------------------------------------------------------

@node Makefile Applications
@appendixsec Makefile Applications
@cindex Makefile applications

@<Makefile---Applications@>=
@








@c *****************************************************************************
@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::          Source files by definition.
* Code Chunk Definitions::    Code chunks by definition.
* Code Chunk References::     Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions
@appendixsec Source File Definitions

@print_file_defs




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs




@c -----------------------------------------------------------------------------
@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs







@c *****************************************************************************

@node @mybibnode{}
@unnumbered Bibliography

@table @asis

@mybibitem{LitProg:Home}
@url{http://www.literateprogramming.com/}

@mybibitem{LitProg:Knuth}
@url{``Literate Programming (1984)'' in Literate Programming. CSLI, 1992, pg.
99.}

@mybibitem{LitProg:Ramsey}
@url{ahttps://www.cs.tufts.edu/~nr/noweb/}

@end table








@c *****************************************************************************

@node List of Tables
@unnumbered List of Tables

@listoffloats Table








@c  *****************************************************************************
@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
